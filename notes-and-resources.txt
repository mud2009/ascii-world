-need to look into image processing, uploading, most likely will need to use react, whatever that means

-break image down into grid based on inputted resolution (varies based on 	font or character size). app then takes each individual grid, takes average of contrast and color, then pushes a character with a color that reflects those values to an "image" array of characters. prints that array to the dom

-stretch would be turning it into a social media site with comments, user authentication, sharing, etc

-stretch try using  Azure's Computer Vision API to provide ai generated captions to accompany the ascii images

-one to many relationship between users and posts , posts would be able to just be strings that are then formatted on the view appropriately

-look into uploading images/alternatively could save to local, then 

-look into edge case handling for file uploads

https://sourceforge.net/software/product/Azure-Computer-Vision/alternatives

https://cloud.google.com/vision google's api

https://github.com/RameshAditya/asciify - python script for converting ascii

https://www.youtube.com/watch?v=HeT-5RZgEQY

https://reactnative.dev/docs/0.65/environment-setup -- emulator for react native

// function convertToASCII(input){
//   const ASCIICharacters = "$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~<>i!lI;:,\"^`'.".split("")
//   const charLength = ASCIICharacters.length;
//   const interval = charLength / 256;

//   // const convertToGrey = async (colorImage) => {
//   //   const bwImg =  colorImage.gamma().greyscale();
//   //   return bwImg
//   // }
//   const resize = async (bw, newWidth = 500) => {
//     const blackAndWhite = await bw;
//     const size = await blackAndWhite.metadata();
//     const ratio = size.width / size.height;
//     const newHeight = parseInt(newWidth * ratio);
//     const resized = await blackAndWhite.resize(newWidth, newHeight, { fit: "outside" })
//     return resized;
//   }
//   const pixelToASCII = async img => {
//     var newImg = await img;
//     const pixels = await newImg.raw().toBuffer();
//     const characters = "";
//     pixels.foreach(pixel => {
//       characters = characters + ASCIICharacters[Math.floor(pixel * interval)]
//     })
//     return characters;
//   }
//   const main = async (newWidth = 500) => {
//     const newImgData = await pixelToASCII(resize(input));
//     const pixels = newImgData.length;
//     let ASCII = "";
//     for (let i = 0; i < pixels; i += newWidth){
//       let line = newImgData.split("").slice(i, i + newWidth);
//       ASCII = ASCII + "\n" + line;
//     }
//   }
//   main()
// }